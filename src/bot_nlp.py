class nlp_bot:
    import openai

    def __init__(self, api_key: str, text_data: list, search_word: str):
        self.openai.api_key = api_key
        self.text_data = text_data
        self.search_word = search_word
        self.response = {}
        self.new_text = ''

        print(f'Using {len(text_data)} texts from {search_word} to create new post')

    def _get_long_text(self, response: dict):
        '''
        Get longest created GPT3 text

        Parameter
        ---------
        response : dict[str : multiple]
            response from openai api
        '''
        all_resp = [i.text for i in response.choices]
        long_resp = max(all_resp, key=len)

        return long_resp
    
    def _clean_text(self, text:str):
        '''
        Clean text of unwanted parts

        Parameter
        ---------
        text : str
            text generated by gpt3
        '''
        text_clean = text.replace('  ', ' ').strip()
        # TODO: clean-up multiple new line characters with regex

        return text_clean


    def create_text(self, max_tokens: int, n: int, temperatur: float):
        '''
        Create new text using GPT3 based on previously scraped texts

        Parameter
        ---------
        max_tokens : int
            maximum number of tokens to generate in the created text
        n : int
            how many completions to generate for each prompt
        temperature : float
            What sampling temperature to use. Higher values means the model
                will take more risks.
            Try 0.9 for more creative applications, and 0 (argmax sampling)
                for ones with a well-defined answer
        '''
        # call openai api
        response = self.openai.Completion.create(engine = "text-davinci-001",
                                        prompt = self.text_data,
                                        max_tokens = max_tokens,
                                        n = n,
                                        temperature = temperatur)
        
        self.response = response

        self.new_text = self._get_long_text(self.response)
        self.new_text = self._clean_text(self.new_text)
